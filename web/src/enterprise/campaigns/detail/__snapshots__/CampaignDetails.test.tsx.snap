// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`CampaignDetails viewerCanAdminister: false viewing existing 1`] = `
<CampaignDetails
  _fetchCampaignById={[Function]}
  campaignID="c"
  history="[History]"
  isLightTheme={true}
  location="[Location path=/]"
  telemetryService={
    Object {
      "log": [Function],
      "logViewEvent": [Function],
    }
  }
>
  <PageTitle
    title="n"
  />
  <CampaignActionsBar
    campaign={
      Object {
        "__typename": "Campaign",
        "branch": "awesome-branch",
        "changesetCountsOverTime": Array [],
        "changesets": Object {
          "stats": Object {
            "closed": 0,
            "merged": 0,
            "open": 8,
            "total": 10,
            "unpublished": 2,
          },
          "totalCount": 0,
        },
        "closedAt": null,
        "createdAt": "2020-01-01",
        "description": "d",
        "diffStat": Object {
          "added": 5,
          "changed": 3,
          "deleted": 2,
        },
        "id": "c",
        "initialApplier": Object {
          "avatarURL": "http://test.test/avatar",
          "username": "alice",
        },
        "name": "n",
        "namespace": Object {
          "namespaceName": "alice",
          "url": "/users/alice",
        },
        "updatedAt": "2020-01-01",
        "viewerCanAdminister": false,
      }
    }
  >
    <div
      className="mb-2"
    >
      <span>
        <AnchorLink
          to="/campaigns"
        >
          <a
            href="/campaigns"
          >
            Campaigns
          </a>
        </AnchorLink>
      </span>
      <span
        className="text-muted d-inline-block mx-1"
      >
        /
      </span>
      <span>
        <AnchorLink
          to="/users/alice"
        >
          <a
            href="/users/alice"
          >
            alice
          </a>
        </AnchorLink>
      </span>
      <span
        className="text-muted d-inline-block mx-1"
      >
        /
      </span>
      <span>
        n
      </span>
    </div>
    <div
      className="d-flex mb-2 position-relative"
    >
      <div>
        <h1
          className="mb-1"
        >
          n
        </h1>
        <div>
          <CampaignStateBadge
            isClosed={false}
          >
            <span
              className="badge badge-success text-uppercase mr-2"
            >
              <Memo(ImageAutoAdjustIcon)
                className="icon-inline campaign-actions-bar__campaign-icon"
              >
                <svg
                  className="mdi-icon icon-inline campaign-actions-bar__campaign-icon"
                  fill="currentColor"
                  height={24}
                  viewBox="0 0 24 24"
                  width={24}
                >
                  <path
                    d="M19 10V19H5V5H14V3H5C3.92 3 3 3.9 3 5V19C3 20.1 3.92 21 5 21H19C20.12 21 21 20.1 21 19V10H19M17 10L17.94 7.94L20 7L17.94 6.06L17 4L16.06 6.06L14 7L16.06 7.94L17 10M13.25 10.75L12 8L10.75 10.75L8 12L10.75 13.25L12 16L13.25 13.25L16 12L13.25 10.75Z"
                  />
                </svg>
              </Memo(ImageAutoAdjustIcon)>
               Open
            </span>
          </CampaignStateBadge>
          <small
            className="text-muted"
          >
            0
            % complete. 
            0
             changesets total
          </small>
        </div>
      </div>
    </div>
  </CampaignActionsBar>
  <CampaignInfoCard
    author={
      Object {
        "avatarURL": "http://test.test/avatar",
        "username": "alice",
      }
    }
    createdAt="2020-01-01"
    description="d"
    history="[History]"
  >
    <div
      className="card mt-2"
    >
      <div
        className="card-header"
      >
        <strong>
          <UserAvatar
            className="icon-inline"
            user={
              Object {
                "avatarURL": "http://test.test/avatar",
                "username": "alice",
              }
            }
          >
            <img
              className="user-avatar icon-inline"
              src="http://test.test/avatar"
            />
          </UserAvatar>
           
          alice
        </strong>
         
        created 
        <Timestamp
          date="2020-01-01"
        >
          <span
            className="timestamp"
            data-tooltip="2020-01-01"
          >
            in almost 14 years
          </span>
        </Timestamp>
      </div>
      <div
        className="card-body"
      >
        <Markdown
          dangerousInnerHTML="<p>d</p>
"
          history="[History]"
        >
          <div
            className="markdown"
            dangerouslySetInnerHTML={
              Object {
                "__html": "<p>d</p>
",
              }
            }
            onClick={[Function]}
          />
        </Markdown>
      </div>
    </div>
  </CampaignInfoCard>
  <h3
    className="mt-4 mb-2"
  >
    Progress
  </h3>
  <CampaignBurndownChart
    changesetCountsOverTime={Array []}
    history="[History]"
  >
    <p>
      <em>
        Burndown chart will be shown when there is more than 1 day of data.
      </em>
    </p>
  </CampaignBurndownChart>
  <CampaignChangesets
    campaignID="c"
    campaignUpdates="[Subject]"
    changesetUpdates="[Subject]"
    history="[History]"
    isLightTheme={true}
    location="[Location path=/]"
    telemetryService={
      Object {
        "log": [Function],
        "logViewEvent": [Function],
      }
    }
    viewerCanAdminister={false}
  >
    <ChangesetFilterRow
      history="[History]"
      location="[Location path=/]"
      onFiltersChange={[Function]}
    >
      <div
        className="form-inline mb-0 mt-2"
      >
        <ChangesetFilter
          htmlID="changeset-state-filter"
          label="State"
          onChange={[Function]}
          values={
            Array [
              "OPEN",
              "CLOSED",
              "MERGED",
              "DELETED",
            ]
          }
        >
          <label
            htmlFor="changeset-state-filter"
          >
            State
          </label>
          <select
            className="form-control mx-2"
            id="changeset-state-filter"
            onChange={[Function]}
          >
            <option
              value=""
            >
              All
            </option>
            <option
              key="OPEN"
              value="OPEN"
            >
              Open
            </option>
            <option
              key="CLOSED"
              value="CLOSED"
            >
              Closed
            </option>
            <option
              key="MERGED"
              value="MERGED"
            >
              Merged
            </option>
            <option
              key="DELETED"
              value="DELETED"
            >
              Deleted
            </option>
          </select>
        </ChangesetFilter>
        <ChangesetFilter
          htmlID="changeset-review-state-filter"
          label="Review state"
          onChange={[Function]}
          values={
            Array [
              "APPROVED",
              "CHANGES_REQUESTED",
              "PENDING",
              "COMMENTED",
              "DISMISSED",
            ]
          }
        >
          <label
            htmlFor="changeset-review-state-filter"
          >
            Review state
          </label>
          <select
            className="form-control mx-2"
            id="changeset-review-state-filter"
            onChange={[Function]}
          >
            <option
              value=""
            >
              All
            </option>
            <option
              key="APPROVED"
              value="APPROVED"
            >
              Approved
            </option>
            <option
              key="CHANGES_REQUESTED"
              value="CHANGES_REQUESTED"
            >
              Changes requested
            </option>
            <option
              key="PENDING"
              value="PENDING"
            >
              Pending
            </option>
            <option
              key="COMMENTED"
              value="COMMENTED"
            >
              Commented
            </option>
            <option
              key="DISMISSED"
              value="DISMISSED"
            >
              Dismissed
            </option>
          </select>
        </ChangesetFilter>
        <ChangesetFilter
          htmlID="changeset-check-state-filter"
          label="Check state"
          onChange={[Function]}
          values={
            Array [
              "PENDING",
              "PASSED",
              "FAILED",
            ]
          }
        >
          <label
            htmlFor="changeset-check-state-filter"
          >
            Check state
          </label>
          <select
            className="form-control mx-2"
            id="changeset-check-state-filter"
            onChange={[Function]}
          >
            <option
              value=""
            >
              All
            </option>
            <option
              key="PENDING"
              value="PENDING"
            >
              Pending
            </option>
            <option
              key="PASSED"
              value="PASSED"
            >
              Passed
            </option>
            <option
              key="FAILED"
              value="FAILED"
            >
              Failed
            </option>
          </select>
        </ChangesetFilter>
      </div>
    </ChangesetFilterRow>
    <div
      className="list-group position-relative"
    >
      <FilteredConnection
        className="mt-2"
        defaultFirst={15}
        hideSearch={true}
        history="[History]"
        location="[Location path=/]"
        nodeComponent={[Function]}
        nodeComponentProps={
          Object {
            "campaignUpdates": "[Subject]",
            "extensionInfo": Object {
              "extensionsController": undefined,
              "hoverifier": Object {
                "hoverState": Object {
                  "actionsOrError": undefined,
                  "highlightedRange": undefined,
                  "hoverOverlayProps": undefined,
                  "hoveredTokenElement": undefined,
                  "selectedPosition": undefined,
                },
                "hoverStateUpdates": "[Subject]",
                "hoverify": [Function],
                "unsubscribe": [Function],
              },
            },
            "history": "[History]",
            "isLightTheme": true,
            "location": "[Location path=/]",
            "viewerCanAdminister": false,
          }
        }
        noun="changeset"
        pluralNoun="changesets"
        queryConnection={[Function]}
        useURLQuery={true}
      >
        <div
          className="filtered-connection test-filtered-connection filtered-connection--noncompact mt-2"
        >
          <span
            className="filtered-connection__loader test-filtered-connection__loader"
          >
            <LoadingSpinner
              className="icon-inline"
            >
              <div
                className="loading-spinner icon-inline"
              />
            </LoadingSpinner>
          </span>
        </div>
      </FilteredConnection>
    </div>
  </CampaignChangesets>
</CampaignDetails>
`;

exports[`CampaignDetails viewerCanAdminister: true viewing existing 1`] = `
<CampaignDetails
  _fetchCampaignById={[Function]}
  campaignID="c"
  history="[History]"
  isLightTheme={true}
  location="[Location path=/]"
  telemetryService={
    Object {
      "log": [Function],
      "logViewEvent": [Function],
    }
  }
>
  <PageTitle
    title="n"
  />
  <CampaignActionsBar
    campaign={
      Object {
        "__typename": "Campaign",
        "branch": "awesome-branch",
        "changesetCountsOverTime": Array [],
        "changesets": Object {
          "stats": Object {
            "closed": 0,
            "merged": 0,
            "open": 8,
            "total": 10,
            "unpublished": 2,
          },
          "totalCount": 0,
        },
        "closedAt": null,
        "createdAt": "2020-01-01",
        "description": "d",
        "diffStat": Object {
          "added": 5,
          "changed": 3,
          "deleted": 2,
        },
        "id": "c",
        "initialApplier": Object {
          "avatarURL": "http://test.test/avatar",
          "username": "alice",
        },
        "name": "n",
        "namespace": Object {
          "namespaceName": "alice",
          "url": "/users/alice",
        },
        "updatedAt": "2020-01-01",
        "viewerCanAdminister": true,
      }
    }
  >
    <div
      className="mb-2"
    >
      <span>
        <AnchorLink
          to="/campaigns"
        >
          <a
            href="/campaigns"
          >
            Campaigns
          </a>
        </AnchorLink>
      </span>
      <span
        className="text-muted d-inline-block mx-1"
      >
        /
      </span>
      <span>
        <AnchorLink
          to="/users/alice"
        >
          <a
            href="/users/alice"
          >
            alice
          </a>
        </AnchorLink>
      </span>
      <span
        className="text-muted d-inline-block mx-1"
      >
        /
      </span>
      <span>
        n
      </span>
    </div>
    <div
      className="d-flex mb-2 position-relative"
    >
      <div>
        <h1
          className="mb-1"
        >
          n
        </h1>
        <div>
          <CampaignStateBadge
            isClosed={false}
          >
            <span
              className="badge badge-success text-uppercase mr-2"
            >
              <Memo(ImageAutoAdjustIcon)
                className="icon-inline campaign-actions-bar__campaign-icon"
              >
                <svg
                  className="mdi-icon icon-inline campaign-actions-bar__campaign-icon"
                  fill="currentColor"
                  height={24}
                  viewBox="0 0 24 24"
                  width={24}
                >
                  <path
                    d="M19 10V19H5V5H14V3H5C3.92 3 3 3.9 3 5V19C3 20.1 3.92 21 5 21H19C20.12 21 21 20.1 21 19V10H19M17 10L17.94 7.94L20 7L17.94 6.06L17 4L16.06 6.06L14 7L16.06 7.94L17 10M13.25 10.75L12 8L10.75 10.75L8 12L10.75 13.25L12 16L13.25 13.25L16 12L13.25 10.75Z"
                  />
                </svg>
              </Memo(ImageAutoAdjustIcon)>
               Open
            </span>
          </CampaignStateBadge>
          <small
            className="text-muted"
          >
            0
            % complete. 
            0
             changesets total
          </small>
        </div>
      </div>
    </div>
  </CampaignActionsBar>
  <CampaignInfoCard
    author={
      Object {
        "avatarURL": "http://test.test/avatar",
        "username": "alice",
      }
    }
    createdAt="2020-01-01"
    description="d"
    history="[History]"
  >
    <div
      className="card mt-2"
    >
      <div
        className="card-header"
      >
        <strong>
          <UserAvatar
            className="icon-inline"
            user={
              Object {
                "avatarURL": "http://test.test/avatar",
                "username": "alice",
              }
            }
          >
            <img
              className="user-avatar icon-inline"
              src="http://test.test/avatar"
            />
          </UserAvatar>
           
          alice
        </strong>
         
        created 
        <Timestamp
          date="2020-01-01"
        >
          <span
            className="timestamp"
            data-tooltip="2020-01-01"
          >
            in almost 14 years
          </span>
        </Timestamp>
      </div>
      <div
        className="card-body"
      >
        <Markdown
          dangerousInnerHTML="<p>d</p>
"
          history="[History]"
        >
          <div
            className="markdown"
            dangerouslySetInnerHTML={
              Object {
                "__html": "<p>d</p>
",
              }
            }
            onClick={[Function]}
          />
        </Markdown>
      </div>
    </div>
  </CampaignInfoCard>
  <h3
    className="mt-4 mb-2"
  >
    Progress
  </h3>
  <CampaignBurndownChart
    changesetCountsOverTime={Array []}
    history="[History]"
  >
    <p>
      <em>
        Burndown chart will be shown when there is more than 1 day of data.
      </em>
    </p>
  </CampaignBurndownChart>
  <CampaignChangesets
    campaignID="c"
    campaignUpdates="[Subject]"
    changesetUpdates="[Subject]"
    history="[History]"
    isLightTheme={true}
    location="[Location path=/]"
    telemetryService={
      Object {
        "log": [Function],
        "logViewEvent": [Function],
      }
    }
    viewerCanAdminister={true}
  >
    <ChangesetFilterRow
      history="[History]"
      location="[Location path=/]"
      onFiltersChange={[Function]}
    >
      <div
        className="form-inline mb-0 mt-2"
      >
        <ChangesetFilter
          htmlID="changeset-state-filter"
          label="State"
          onChange={[Function]}
          values={
            Array [
              "OPEN",
              "CLOSED",
              "MERGED",
              "DELETED",
            ]
          }
        >
          <label
            htmlFor="changeset-state-filter"
          >
            State
          </label>
          <select
            className="form-control mx-2"
            id="changeset-state-filter"
            onChange={[Function]}
          >
            <option
              value=""
            >
              All
            </option>
            <option
              key="OPEN"
              value="OPEN"
            >
              Open
            </option>
            <option
              key="CLOSED"
              value="CLOSED"
            >
              Closed
            </option>
            <option
              key="MERGED"
              value="MERGED"
            >
              Merged
            </option>
            <option
              key="DELETED"
              value="DELETED"
            >
              Deleted
            </option>
          </select>
        </ChangesetFilter>
        <ChangesetFilter
          htmlID="changeset-review-state-filter"
          label="Review state"
          onChange={[Function]}
          values={
            Array [
              "APPROVED",
              "CHANGES_REQUESTED",
              "PENDING",
              "COMMENTED",
              "DISMISSED",
            ]
          }
        >
          <label
            htmlFor="changeset-review-state-filter"
          >
            Review state
          </label>
          <select
            className="form-control mx-2"
            id="changeset-review-state-filter"
            onChange={[Function]}
          >
            <option
              value=""
            >
              All
            </option>
            <option
              key="APPROVED"
              value="APPROVED"
            >
              Approved
            </option>
            <option
              key="CHANGES_REQUESTED"
              value="CHANGES_REQUESTED"
            >
              Changes requested
            </option>
            <option
              key="PENDING"
              value="PENDING"
            >
              Pending
            </option>
            <option
              key="COMMENTED"
              value="COMMENTED"
            >
              Commented
            </option>
            <option
              key="DISMISSED"
              value="DISMISSED"
            >
              Dismissed
            </option>
          </select>
        </ChangesetFilter>
        <ChangesetFilter
          htmlID="changeset-check-state-filter"
          label="Check state"
          onChange={[Function]}
          values={
            Array [
              "PENDING",
              "PASSED",
              "FAILED",
            ]
          }
        >
          <label
            htmlFor="changeset-check-state-filter"
          >
            Check state
          </label>
          <select
            className="form-control mx-2"
            id="changeset-check-state-filter"
            onChange={[Function]}
          >
            <option
              value=""
            >
              All
            </option>
            <option
              key="PENDING"
              value="PENDING"
            >
              Pending
            </option>
            <option
              key="PASSED"
              value="PASSED"
            >
              Passed
            </option>
            <option
              key="FAILED"
              value="FAILED"
            >
              Failed
            </option>
          </select>
        </ChangesetFilter>
      </div>
    </ChangesetFilterRow>
    <div
      className="list-group position-relative"
    >
      <FilteredConnection
        className="mt-2"
        defaultFirst={15}
        hideSearch={true}
        history="[History]"
        location="[Location path=/]"
        nodeComponent={[Function]}
        nodeComponentProps={
          Object {
            "campaignUpdates": "[Subject]",
            "extensionInfo": Object {
              "extensionsController": undefined,
              "hoverifier": Object {
                "hoverState": Object {
                  "actionsOrError": undefined,
                  "highlightedRange": undefined,
                  "hoverOverlayProps": undefined,
                  "hoveredTokenElement": undefined,
                  "selectedPosition": undefined,
                },
                "hoverStateUpdates": "[Subject]",
                "hoverify": [Function],
                "unsubscribe": [Function],
              },
            },
            "history": "[History]",
            "isLightTheme": true,
            "location": "[Location path=/]",
            "viewerCanAdminister": true,
          }
        }
        noun="changeset"
        pluralNoun="changesets"
        queryConnection={[Function]}
        useURLQuery={true}
      >
        <div
          className="filtered-connection test-filtered-connection filtered-connection--noncompact mt-2"
        >
          <span
            className="filtered-connection__loader test-filtered-connection__loader"
          >
            <LoadingSpinner
              className="icon-inline"
            >
              <div
                className="loading-spinner icon-inline"
              />
            </LoadingSpinner>
          </span>
        </div>
      </FilteredConnection>
    </div>
  </CampaignChangesets>
</CampaignDetails>
`;
